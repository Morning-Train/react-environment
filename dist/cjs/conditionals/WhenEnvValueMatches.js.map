{"version":3,"file":"WhenEnvValueMatches.js","sources":["../../../src/conditionals/WhenEnvValueMatches.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport useEnvValue from '../hooks/use-env-value'\nimport useShouldConditionallyRender from '../hooks/use-should-conditionally-render'\n\nfunction WhenEnvValueMatches ({\n  name,\n  path,\n  matches,\n  negate = false,\n  children\n}) {\n  const _path = path || name\n  const [value] = useEnvValue(_path)\n  const [shouldRender] = useShouldConditionallyRender(value, matches, negate)\n\n  return shouldRender ? children : null\n}\n\nWhenEnvValueMatches.propTypes = {\n  /**\n     * The env path(name). (USE PATH INSTEAD)\n     */\n  name: PropTypes.string,\n  /**\n     * The env path.\n     */\n  path: PropTypes.string,\n  /**\n     * The value to match the current parameter against.\n     */\n  matches: PropTypes.any,\n  /**\n     * Should the result be negated?\n     */\n  negate: PropTypes.bool\n}\n\nexport default WhenEnvValueMatches\n"],"names":["WhenEnvValueMatches","name","path","matches","negate","children","_path","useEnvValue","value","useShouldConditionallyRender","shouldRender","propTypes","PropTypes","string","any","bool"],"mappings":";;;;;;;;;;;;AAKA,SAASA,mBAAT,OAMG;AAAA,MALDC,IAKC,QALDA,IAKC;AAAA,MAJDC,IAIC,QAJDA,IAIC;AAAA,MAHDC,OAGC,QAHDA,OAGC;AAAA,yBAFDC,MAEC;AAAA,MAFDA,MAEC,4BAFQ,KAER;AAAA,MADDC,QACC,QADDA,QACC;;AACD,MAAMC,KAAK,GAAGJ,IAAI,IAAID,IAAtB;;AACA,qBAAgBM,WAAW,CAACD,KAAD,CAA3B;AAAA;AAAA,MAAOE,KAAP;;AACA,8BAAuBC,4BAA4B,CAACD,KAAD,EAAQL,OAAR,EAAiBC,MAAjB,CAAnD;AAAA;AAAA,MAAOM,YAAP;;AAEA,SAAOA,YAAY,GAAGL,QAAH,GAAc,IAAjC;AACD;;AAEDL,mBAAmB,CAACW,SAApB,GAAgC;AAC9B;AACF;AACA;AACEV,EAAAA,IAAI,EAAEW,6BAAS,CAACC,MAJc;;AAK9B;AACF;AACA;AACEX,EAAAA,IAAI,EAAEU,6BAAS,CAACC,MARc;;AAS9B;AACF;AACA;AACEV,EAAAA,OAAO,EAAES,6BAAS,CAACE,GAZW;;AAa9B;AACF;AACA;AACEV,EAAAA,MAAM,EAAEQ,6BAAS,CAACG;AAhBY,CAAhC;;;;"}